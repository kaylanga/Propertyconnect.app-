// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String    // Hashed password
  role          UserRole  @default(USER)
  verified      Boolean   @default(false)
  profileImage  String?
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  properties    Property[]
  bookings      Booking[]
  reviews       Review[]
  messages      Message[]
  alerts        PropertyAlert[]
  favorites     Property[]    @relation("UserFavorites")
}

// Property model
model Property {
  id          String    @id @default(uuid())
  title       String
  description String
  type        String
  status      String
  price       Decimal
  currency    String    @default("USD")
  location    Json      // Stores address and coordinates
  features    Json      // Stores bedrooms, bathrooms, etc.
  amenities   String[]
  images      String[]
  verified    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  bookings    Booking[]
  reviews     Review[]
  favoredBy   User[]    @relation("UserFavorites")
}

// Booking model
model Booking {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  status      String
  totalAmount Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

// Review model
model Review {
  id          String    @id @default(uuid())
  rating      Int
  comment     String
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

// Message model
model Message {
  id          String    @id @default(uuid())
  content     String
  attachments String[]
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relations
  sender      User      @relation(fields: [senderId], references: [id])
  senderId    String
  receiverId  String
}

// Property Alert model
model PropertyAlert {
  id          String    @id @default(uuid())
  criteria    Json      // Stores search criteria
  frequency   String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

// Enums
enum UserRole {
  USER
  AGENT
  ADMIN
} 